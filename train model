import json
import random
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load the dataset
with open('/content/intents.json') as file:
    data = json.load(file)

# Prepare the data
patterns = []
tags = []

for intent in data['intents']:
    for pattern in intent['patterns']:
        patterns.append(pattern)
        tags.append(intent['tag'])

df = pd.DataFrame({'patterns': patterns, 'tags': tags})

# Split the data
X_train, X_test, y_train, y_test = train_test_split(df['patterns'], df['tags'], test_size=0.2, random_state=42)

# Vectorize the text data
vectorizer = TfidfVectorizer()
X_train_vectorized = vectorizer.fit_transform(X_train)
X_test_vectorized = vectorizer.transform(X_test)

# Train the model
model = LogisticRegression()
model.fit(X_train_vectorized, y_train)

# Make predictions
y_pred = model.predict(X_test_vectorized)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')
accuracy_percentage = accuracy * 100
print(f'Accuracy: {accuracy_percentage:.2f}%')
# Define the chatbot reply function
def chatbot_reply(question):
    question_vectorized = vectorizer.transform([question])
    tag = model.predict(question_vectorized)[0]
    
    for intent in data['intents']:
        if intent['tag'] == tag:
            response = random.choice(intent['responses'])
            return response

# Interactive chat
print("Start chatting with the bot (type 'exit' to stop)!")
while True:
    user_input = input("You: ")
    if user_input.lower() == 'exit':
        break
    reply = chatbot_reply(user_input)
    print(f"Bot: {reply}")
